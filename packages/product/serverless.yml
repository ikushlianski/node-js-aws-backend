service: product-service
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  distFolder: ./build/handlers

useDotenv: true

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  profile: epam-aws-training-account

  environment:
    CREATE_PRODUCT_TOPIC:
      Ref: createProductTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: createProductTopic

resources:
  Resources:
    createProductTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: createProductTopic
    createProductSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: ${env:SUBSCRIPTION_ENDPOINT_1}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy: {
          "title": ["Classic tour of Minsk"]
        }

    createExpensiveProductSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        Endpoint: ${env:SUBSCRIPTION_ENDPOINT_2}
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy: {
          "title": [{"anything-but":"Classic tour of Minsk"}]
        }

functions:
  getProducts:
    handler: ${self:custom.distFolder}/get-products.getProducts
    events:
      - http:
          method: get
          path: /products
          cors: true
  getProduct:
    handler: ${self:custom.distFolder}/get-product.getProduct
    events:
      - http:
          method: get
          path: /products/{id}
          cors: true
  createProduct:
    handler: ${self:custom.distFolder}/create-product.createProduct
    events:
      - http:
          method: post
          path: /products
          cors: true
  catalogBatchProcess:
    handler: ${self:custom.distFolder}/catalog-batch-process.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            !ImportValue myCatalogItemsQueueArn
